// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StringValue struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringValue) Reset()         { *m = StringValue{} }
func (m *StringValue) String() string { return proto.CompactTextString(m) }
func (*StringValue) ProtoMessage()    {}
func (*StringValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *StringValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringValue.Unmarshal(m, b)
}
func (m *StringValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringValue.Marshal(b, m, deterministic)
}
func (m *StringValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringValue.Merge(m, src)
}
func (m *StringValue) XXX_Size() int {
	return xxx_messageInfo_StringValue.Size(m)
}
func (m *StringValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StringValue.DiscardUnknown(m)
}

var xxx_messageInfo_StringValue proto.InternalMessageInfo

func (m *StringValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//小米网关设备
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type MDNSService struct {
	Instance             string   `protobuf:"bytes,1,opt,name=Instance,proto3" json:"Instance,omitempty"`
	IP                   string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	MDNSInfo             string   `protobuf:"bytes,4,opt,name=MDNSInfo,proto3" json:"MDNSInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MDNSService) Reset()         { *m = MDNSService{} }
func (m *MDNSService) String() string { return proto.CompactTextString(m) }
func (*MDNSService) ProtoMessage()    {}
func (*MDNSService) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *MDNSService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDNSService.Unmarshal(m, b)
}
func (m *MDNSService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDNSService.Marshal(b, m, deterministic)
}
func (m *MDNSService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDNSService.Merge(m, src)
}
func (m *MDNSService) XXX_Size() int {
	return xxx_messageInfo_MDNSService.Size(m)
}
func (m *MDNSService) XXX_DiscardUnknown() {
	xxx_messageInfo_MDNSService.DiscardUnknown(m)
}

var xxx_messageInfo_MDNSService proto.InternalMessageInfo

func (m *MDNSService) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *MDNSService) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *MDNSService) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MDNSService) GetMDNSInfo() string {
	if m != nil {
		return m.MDNSInfo
	}
	return ""
}

type Color struct {
	R                    int32    `protobuf:"varint,1,opt,name=R,proto3" json:"R,omitempty"`
	G                    int32    `protobuf:"varint,2,opt,name=G,proto3" json:"G,omitempty"`
	B                    int32    `protobuf:"varint,3,opt,name=B,proto3" json:"B,omitempty"`
	A                    int32    `protobuf:"varint,4,opt,name=A,proto3" json:"A,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Color) Reset()         { *m = Color{} }
func (m *Color) String() string { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()    {}
func (*Color) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *Color) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Color.Unmarshal(m, b)
}
func (m *Color) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Color.Marshal(b, m, deterministic)
}
func (m *Color) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Color.Merge(m, src)
}
func (m *Color) XXX_Size() int {
	return xxx_messageInfo_Color.Size(m)
}
func (m *Color) XXX_DiscardUnknown() {
	xxx_messageInfo_Color.DiscardUnknown(m)
}

var xxx_messageInfo_Color proto.InternalMessageInfo

func (m *Color) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *Color) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

type GatewayState struct {
	On                   bool     `protobuf:"varint,1,opt,name=On,proto3" json:"On,omitempty"`
	Color                *Color   `protobuf:"bytes,2,opt,name=Color,proto3" json:"Color,omitempty"`
	Brightness           uint32   `protobuf:"varint,3,opt,name=Brightness,proto3" json:"Brightness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayState) Reset()         { *m = GatewayState{} }
func (m *GatewayState) String() string { return proto.CompactTextString(m) }
func (*GatewayState) ProtoMessage()    {}
func (*GatewayState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *GatewayState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayState.Unmarshal(m, b)
}
func (m *GatewayState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayState.Marshal(b, m, deterministic)
}
func (m *GatewayState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayState.Merge(m, src)
}
func (m *GatewayState) XXX_Size() int {
	return xxx_messageInfo_GatewayState.Size(m)
}
func (m *GatewayState) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayState.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayState proto.InternalMessageInfo

func (m *GatewayState) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

func (m *GatewayState) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *GatewayState) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type GatewayUpdateMessage struct {
	ID                   string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State                *GatewayState `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GatewayUpdateMessage) Reset()         { *m = GatewayUpdateMessage{} }
func (m *GatewayUpdateMessage) String() string { return proto.CompactTextString(m) }
func (*GatewayUpdateMessage) ProtoMessage()    {}
func (*GatewayUpdateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *GatewayUpdateMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayUpdateMessage.Unmarshal(m, b)
}
func (m *GatewayUpdateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayUpdateMessage.Marshal(b, m, deterministic)
}
func (m *GatewayUpdateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayUpdateMessage.Merge(m, src)
}
func (m *GatewayUpdateMessage) XXX_Size() int {
	return xxx_messageInfo_GatewayUpdateMessage.Size(m)
}
func (m *GatewayUpdateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayUpdateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayUpdateMessage proto.InternalMessageInfo

func (m *GatewayUpdateMessage) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GatewayUpdateMessage) GetState() *GatewayState {
	if m != nil {
		return m.State
	}
	return nil
}

type Device struct {
	RunId                string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Mac                  string   `protobuf:"bytes,3,opt,name=Mac,proto3" json:"Mac,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *Device) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Device) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *Device) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type DeviceList struct {
	Devices              []*Device `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeviceList) Reset()         { *m = DeviceList{} }
func (m *DeviceList) String() string { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()    {}
func (*DeviceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *DeviceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceList.Unmarshal(m, b)
}
func (m *DeviceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceList.Marshal(b, m, deterministic)
}
func (m *DeviceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceList.Merge(m, src)
}
func (m *DeviceList) XXX_Size() int {
	return xxx_messageInfo_DeviceList.Size(m)
}
func (m *DeviceList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceList.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceList proto.InternalMessageInfo

func (m *DeviceList) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

// 几种代理类型
type SessionConfig struct {
	RunId                string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	StatusToClient       bool     `protobuf:"varint,4,opt,name=StatusToClient,proto3" json:"StatusToClient,omitempty"`
	StatusP2PAsClient    bool     `protobuf:"varint,5,opt,name=StatusP2PAsClient,proto3" json:"StatusP2PAsClient,omitempty"`
	StatusP2PAsServer    bool     `protobuf:"varint,6,opt,name=StatusP2PAsServer,proto3" json:"StatusP2PAsServer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionConfig) Reset()         { *m = SessionConfig{} }
func (m *SessionConfig) String() string { return proto.CompactTextString(m) }
func (*SessionConfig) ProtoMessage()    {}
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *SessionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionConfig.Unmarshal(m, b)
}
func (m *SessionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionConfig.Marshal(b, m, deterministic)
}
func (m *SessionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionConfig.Merge(m, src)
}
func (m *SessionConfig) XXX_Size() int {
	return xxx_messageInfo_SessionConfig.Size(m)
}
func (m *SessionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SessionConfig proto.InternalMessageInfo

func (m *SessionConfig) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *SessionConfig) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SessionConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SessionConfig) GetStatusToClient() bool {
	if m != nil {
		return m.StatusToClient
	}
	return false
}

func (m *SessionConfig) GetStatusP2PAsClient() bool {
	if m != nil {
		return m.StatusP2PAsClient
	}
	return false
}

func (m *SessionConfig) GetStatusP2PAsServer() bool {
	if m != nil {
		return m.StatusP2PAsServer
	}
	return false
}

type SessionList struct {
	SessionConfigs       []*SessionConfig `protobuf:"bytes,1,rep,name=SessionConfigs,proto3" json:"SessionConfigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SessionList) Reset()         { *m = SessionList{} }
func (m *SessionList) String() string { return proto.CompactTextString(m) }
func (*SessionList) ProtoMessage()    {}
func (*SessionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *SessionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionList.Unmarshal(m, b)
}
func (m *SessionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionList.Marshal(b, m, deterministic)
}
func (m *SessionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionList.Merge(m, src)
}
func (m *SessionList) XXX_Size() int {
	return xxx_messageInfo_SessionList.Size(m)
}
func (m *SessionList) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionList.DiscardUnknown(m)
}

var xxx_messageInfo_SessionList proto.InternalMessageInfo

func (m *SessionList) GetSessionConfigs() []*SessionConfig {
	if m != nil {
		return m.SessionConfigs
	}
	return nil
}

type PortConfig struct {
	Device               *Device  `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	LocalProt            int32    `protobuf:"varint,2,opt,name=LocalProt,proto3" json:"LocalProt,omitempty"`
	RemotePort           int32    `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	RemotePortStatus     bool     `protobuf:"varint,5,opt,name=RemotePortStatus,proto3" json:"RemotePortStatus,omitempty"`
	MDNSInfo             string   `protobuf:"bytes,6,opt,name=MDNSInfo,proto3" json:"MDNSInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortConfig) Reset()         { *m = PortConfig{} }
func (m *PortConfig) String() string { return proto.CompactTextString(m) }
func (*PortConfig) ProtoMessage()    {}
func (*PortConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}

func (m *PortConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortConfig.Unmarshal(m, b)
}
func (m *PortConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortConfig.Marshal(b, m, deterministic)
}
func (m *PortConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortConfig.Merge(m, src)
}
func (m *PortConfig) XXX_Size() int {
	return xxx_messageInfo_PortConfig.Size(m)
}
func (m *PortConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PortConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PortConfig proto.InternalMessageInfo

func (m *PortConfig) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *PortConfig) GetLocalProt() int32 {
	if m != nil {
		return m.LocalProt
	}
	return 0
}

func (m *PortConfig) GetRemotePort() int32 {
	if m != nil {
		return m.RemotePort
	}
	return 0
}

func (m *PortConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PortConfig) GetRemotePortStatus() bool {
	if m != nil {
		return m.RemotePortStatus
	}
	return false
}

func (m *PortConfig) GetMDNSInfo() string {
	if m != nil {
		return m.MDNSInfo
	}
	return ""
}

type PortList struct {
	PortConfigs          []*PortConfig `protobuf:"bytes,1,rep,name=PortConfigs,proto3" json:"PortConfigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PortList) Reset()         { *m = PortList{} }
func (m *PortList) String() string { return proto.CompactTextString(m) }
func (*PortList) ProtoMessage()    {}
func (*PortList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{11}
}

func (m *PortList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortList.Unmarshal(m, b)
}
func (m *PortList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortList.Marshal(b, m, deterministic)
}
func (m *PortList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortList.Merge(m, src)
}
func (m *PortList) XXX_Size() int {
	return xxx_messageInfo_PortList.Size(m)
}
func (m *PortList) XXX_DiscardUnknown() {
	xxx_messageInfo_PortList.DiscardUnknown(m)
}

var xxx_messageInfo_PortList proto.InternalMessageInfo

func (m *PortList) GetPortConfigs() []*PortConfig {
	if m != nil {
		return m.PortConfigs
	}
	return nil
}

type SOCKS5Config struct {
	RunId                string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	EncType              string   `protobuf:"bytes,4,opt,name=EncType,proto3" json:"EncType,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SOCKS5Config) Reset()         { *m = SOCKS5Config{} }
func (m *SOCKS5Config) String() string { return proto.CompactTextString(m) }
func (*SOCKS5Config) ProtoMessage()    {}
func (*SOCKS5Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{12}
}

func (m *SOCKS5Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SOCKS5Config.Unmarshal(m, b)
}
func (m *SOCKS5Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SOCKS5Config.Marshal(b, m, deterministic)
}
func (m *SOCKS5Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SOCKS5Config.Merge(m, src)
}
func (m *SOCKS5Config) XXX_Size() int {
	return xxx_messageInfo_SOCKS5Config.Size(m)
}
func (m *SOCKS5Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SOCKS5Config.DiscardUnknown(m)
}

var xxx_messageInfo_SOCKS5Config proto.InternalMessageInfo

func (m *SOCKS5Config) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *SOCKS5Config) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SOCKS5Config) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SOCKS5Config) GetEncType() string {
	if m != nil {
		return m.EncType
	}
	return ""
}

func (m *SOCKS5Config) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SOCKS5List struct {
	SOCKS5Configs        []*SOCKS5Config `protobuf:"bytes,1,rep,name=SOCKS5Configs,proto3" json:"SOCKS5Configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SOCKS5List) Reset()         { *m = SOCKS5List{} }
func (m *SOCKS5List) String() string { return proto.CompactTextString(m) }
func (*SOCKS5List) ProtoMessage()    {}
func (*SOCKS5List) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{13}
}

func (m *SOCKS5List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SOCKS5List.Unmarshal(m, b)
}
func (m *SOCKS5List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SOCKS5List.Marshal(b, m, deterministic)
}
func (m *SOCKS5List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SOCKS5List.Merge(m, src)
}
func (m *SOCKS5List) XXX_Size() int {
	return xxx_messageInfo_SOCKS5List.Size(m)
}
func (m *SOCKS5List) XXX_DiscardUnknown() {
	xxx_messageInfo_SOCKS5List.DiscardUnknown(m)
}

var xxx_messageInfo_SOCKS5List proto.InternalMessageInfo

func (m *SOCKS5List) GetSOCKS5Configs() []*SOCKS5Config {
	if m != nil {
		return m.SOCKS5Configs
	}
	return nil
}

type HTTPConfig struct {
	RunId                string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Domain               string   `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteIP             string   `protobuf:"bytes,3,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort           int32    `protobuf:"varint,4,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	UserName             string   `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password             string   `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
	IfHttps              bool     `protobuf:"varint,7,opt,name=IfHttps,proto3" json:"IfHttps,omitempty"`
	Description          string   `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	RemotePortStatus     bool     `protobuf:"varint,9,opt,name=RemotePortStatus,proto3" json:"RemotePortStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPConfig) Reset()         { *m = HTTPConfig{} }
func (m *HTTPConfig) String() string { return proto.CompactTextString(m) }
func (*HTTPConfig) ProtoMessage()    {}
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{14}
}

func (m *HTTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPConfig.Unmarshal(m, b)
}
func (m *HTTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPConfig.Marshal(b, m, deterministic)
}
func (m *HTTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPConfig.Merge(m, src)
}
func (m *HTTPConfig) XXX_Size() int {
	return xxx_messageInfo_HTTPConfig.Size(m)
}
func (m *HTTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPConfig proto.InternalMessageInfo

func (m *HTTPConfig) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *HTTPConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *HTTPConfig) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

func (m *HTTPConfig) GetRemotePort() int32 {
	if m != nil {
		return m.RemotePort
	}
	return 0
}

func (m *HTTPConfig) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *HTTPConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HTTPConfig) GetIfHttps() bool {
	if m != nil {
		return m.IfHttps
	}
	return false
}

func (m *HTTPConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HTTPConfig) GetRemotePortStatus() bool {
	if m != nil {
		return m.RemotePortStatus
	}
	return false
}

type HTTPList struct {
	HTTPConfigs          []*HTTPConfig `protobuf:"bytes,1,rep,name=HTTPConfigs,proto3" json:"HTTPConfigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HTTPList) Reset()         { *m = HTTPList{} }
func (m *HTTPList) String() string { return proto.CompactTextString(m) }
func (*HTTPList) ProtoMessage()    {}
func (*HTTPList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{15}
}

func (m *HTTPList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPList.Unmarshal(m, b)
}
func (m *HTTPList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPList.Marshal(b, m, deterministic)
}
func (m *HTTPList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPList.Merge(m, src)
}
func (m *HTTPList) XXX_Size() int {
	return xxx_messageInfo_HTTPList.Size(m)
}
func (m *HTTPList) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPList.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPList proto.InternalMessageInfo

func (m *HTTPList) GetHTTPConfigs() []*HTTPConfig {
	if m != nil {
		return m.HTTPConfigs
	}
	return nil
}

type MDNSServiceList struct {
	MDNSServices         []*MDNSService `protobuf:"bytes,1,rep,name=MDNSServices,proto3" json:"MDNSServices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MDNSServiceList) Reset()         { *m = MDNSServiceList{} }
func (m *MDNSServiceList) String() string { return proto.CompactTextString(m) }
func (*MDNSServiceList) ProtoMessage()    {}
func (*MDNSServiceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{16}
}

func (m *MDNSServiceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDNSServiceList.Unmarshal(m, b)
}
func (m *MDNSServiceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDNSServiceList.Marshal(b, m, deterministic)
}
func (m *MDNSServiceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDNSServiceList.Merge(m, src)
}
func (m *MDNSServiceList) XXX_Size() int {
	return xxx_messageInfo_MDNSServiceList.Size(m)
}
func (m *MDNSServiceList) XXX_DiscardUnknown() {
	xxx_messageInfo_MDNSServiceList.DiscardUnknown(m)
}

var xxx_messageInfo_MDNSServiceList proto.InternalMessageInfo

func (m *MDNSServiceList) GetMDNSServices() []*MDNSService {
	if m != nil {
		return m.MDNSServices
	}
	return nil
}

func init() {
	proto.RegisterType((*StringValue)(nil), "pb.StringValue")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*MDNSService)(nil), "pb.MDNSService")
	proto.RegisterType((*Color)(nil), "pb.Color")
	proto.RegisterType((*GatewayState)(nil), "pb.GatewayState")
	proto.RegisterType((*GatewayUpdateMessage)(nil), "pb.GatewayUpdateMessage")
	proto.RegisterType((*Device)(nil), "pb.Device")
	proto.RegisterType((*DeviceList)(nil), "pb.DeviceList")
	proto.RegisterType((*SessionConfig)(nil), "pb.SessionConfig")
	proto.RegisterType((*SessionList)(nil), "pb.SessionList")
	proto.RegisterType((*PortConfig)(nil), "pb.PortConfig")
	proto.RegisterType((*PortList)(nil), "pb.PortList")
	proto.RegisterType((*SOCKS5Config)(nil), "pb.SOCKS5Config")
	proto.RegisterType((*SOCKS5List)(nil), "pb.SOCKS5List")
	proto.RegisterType((*HTTPConfig)(nil), "pb.HTTPConfig")
	proto.RegisterType((*HTTPList)(nil), "pb.HTTPList")
	proto.RegisterType((*MDNSServiceList)(nil), "pb.MDNSServiceList")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0x1a, 0x47,
	0x14, 0xf6, 0x62, 0x2f, 0x86, 0x03, 0xd8, 0xce, 0xc4, 0xad, 0x10, 0xaa, 0x1a, 0x6b, 0x6b, 0xc5,
	0x56, 0x1b, 0x23, 0x97, 0xb4, 0x69, 0x5d, 0x55, 0xaa, 0xf8, 0x49, 0x30, 0xaa, 0x6d, 0x56, 0x03,
	0x6e, 0x2f, 0xab, 0x35, 0x0c, 0x64, 0x95, 0x65, 0x67, 0xb5, 0x3b, 0x4e, 0xca, 0x6d, 0x9f, 0xa0,
	0x57, 0x7d, 0x89, 0x3e, 0x45, 0xdf, 0xa2, 0xb7, 0x7d, 0x93, 0x6a, 0xfe, 0x60, 0x7f, 0xb0, 0x8d,
	0x73, 0xb7, 0xe7, 0xcc, 0xf9, 0xf9, 0xce, 0x77, 0xce, 0x99, 0x01, 0xa8, 0x44, 0x24, 0x7c, 0xef,
	0x8e, 0x48, 0x3d, 0x08, 0x29, 0xa3, 0x28, 0x17, 0xdc, 0x58, 0x5f, 0x40, 0x69, 0xc0, 0x42, 0xd7,
	0x9f, 0xfe, 0xe2, 0x78, 0xb7, 0x04, 0xed, 0x83, 0x29, 0x3e, 0xaa, 0xc6, 0x81, 0x71, 0x5c, 0xc4,
	0x52, 0xb0, 0xb6, 0xc1, 0x7c, 0x3d, 0x0b, 0xd8, 0xdc, 0x72, 0xa1, 0x74, 0xd9, 0xb9, 0x1a, 0x0c,
	0x64, 0x18, 0x54, 0x83, 0x42, 0xcf, 0x8f, 0x98, 0xe3, 0x8f, 0xb4, 0xc3, 0x42, 0x46, 0x3b, 0x90,
	0xeb, 0xd9, 0xd5, 0x9c, 0xd0, 0xe6, 0x7a, 0x36, 0x42, 0xb0, 0x65, 0xd3, 0x90, 0x55, 0x37, 0x0f,
	0x8c, 0x63, 0x13, 0x8b, 0x6f, 0xee, 0xcf, 0xc3, 0xf5, 0xfc, 0x09, 0xad, 0x6e, 0x49, 0x7f, 0x2d,
	0x5b, 0x3f, 0x81, 0xd9, 0xa6, 0x1e, 0x0d, 0x51, 0x19, 0x0c, 0x2c, 0xa2, 0x9b, 0xd8, 0xc0, 0x5c,
	0xea, 0x8a, 0xa8, 0x26, 0x36, 0xba, 0x5c, 0x6a, 0xa9, 0x88, 0x46, 0x8b, 0x4b, 0x4d, 0x11, 0xc7,
	0xc4, 0x46, 0xd3, 0xfa, 0x0d, 0xca, 0x5d, 0x87, 0x91, 0x0f, 0xce, 0x7c, 0xc0, 0x1c, 0x26, 0x00,
	0xf5, 0x7d, 0x11, 0xa8, 0x80, 0x73, 0x7d, 0x1f, 0x3d, 0x53, 0x09, 0x44, 0xb4, 0x52, 0xa3, 0x58,
	0x0f, 0x6e, 0xea, 0x42, 0x81, 0x55, 0xe2, 0xcf, 0x01, 0x5a, 0xa1, 0x3b, 0x7d, 0xcb, 0x7c, 0x12,
	0x45, 0x22, 0x4b, 0x05, 0xc7, 0x34, 0xd6, 0x15, 0xec, 0xab, 0x04, 0xd7, 0xc1, 0xd8, 0x61, 0xe4,
	0x92, 0x44, 0x91, 0x33, 0x95, 0x95, 0x77, 0x14, 0x1f, 0xb9, 0x5e, 0x07, 0x3d, 0x07, 0x53, 0x20,
	0x50, 0x89, 0xf6, 0x78, 0xa2, 0x38, 0x32, 0x2c, 0x8f, 0xad, 0x09, 0xe4, 0x3b, 0x44, 0xf0, 0xba,
	0x0f, 0x26, 0xbe, 0xf5, 0x7b, 0x63, 0xdd, 0x05, 0x21, 0x70, 0x06, 0x9b, 0xe3, 0x71, 0xa8, 0x38,
	0x15, 0xdf, 0x68, 0x0f, 0x36, 0x2f, 0x9d, 0x91, 0x00, 0x57, 0xc4, 0xfc, 0x13, 0x1d, 0x40, 0xa9,
	0x43, 0xa2, 0x51, 0xe8, 0x06, 0xcc, 0xa5, 0xbe, 0xa2, 0x35, 0xae, 0xb2, 0x1a, 0x00, 0x32, 0xcf,
	0x85, 0x1b, 0x31, 0x74, 0x08, 0xdb, 0x52, 0x8a, 0xaa, 0xc6, 0xc1, 0xe6, 0x71, 0xa9, 0x01, 0x1c,
	0x9f, 0x54, 0x61, 0x7d, 0x64, 0xfd, 0x67, 0x40, 0x65, 0x40, 0xa2, 0xc8, 0xa5, 0x7e, 0x9b, 0xfa,
	0x13, 0x77, 0x7a, 0x07, 0xc6, 0x7d, 0x30, 0x87, 0xf4, 0x1d, 0xf1, 0x15, 0x48, 0x29, 0xa4, 0x31,
	0x6d, 0x66, 0x30, 0xa1, 0xe7, 0xb0, 0xc3, 0x49, 0xb8, 0x8d, 0x86, 0xb4, 0xed, 0xb9, 0xc4, 0x67,
	0x02, 0x78, 0x01, 0xa7, 0xb4, 0xe8, 0x05, 0x3c, 0x91, 0x1a, 0xbb, 0x61, 0x37, 0x23, 0x65, 0x6a,
	0x0a, 0xd3, 0xec, 0x41, 0xca, 0x9a, 0x4f, 0x2d, 0x09, 0xab, 0xf9, 0x8c, 0xb5, 0x3c, 0xb0, 0xce,
	0xa1, 0xa4, 0x4a, 0x14, 0xc4, 0x9c, 0xc1, 0x4e, 0xa2, 0x62, 0xcd, 0xcf, 0x13, 0xce, 0x4f, 0xe2,
	0x04, 0xa7, 0x0c, 0xad, 0x7f, 0x0d, 0x00, 0x3e, 0xe0, 0x8a, 0x2a, 0x4b, 0x37, 0x56, 0x70, 0x95,
	0x64, 0x58, 0xb7, 0xfc, 0x33, 0x28, 0x5e, 0xd0, 0x91, 0xe3, 0xd9, 0x21, 0x65, 0x6a, 0xbe, 0x97,
	0x0a, 0x3e, 0x8a, 0x98, 0xcc, 0x28, 0x23, 0xb1, 0x15, 0x8a, 0x69, 0x1e, 0x6e, 0x3a, 0xfa, 0x12,
	0xf6, 0x96, 0xf6, 0xb2, 0x76, 0xc5, 0x5b, 0x46, 0x9f, 0x58, 0xcb, 0x7c, 0x6a, 0x2d, 0x7f, 0x84,
	0x02, 0xb7, 0x14, 0x0c, 0x9d, 0x42, 0x69, 0x59, 0xa5, 0xa6, 0x67, 0x87, 0x17, 0xb7, 0x54, 0xe3,
	0xb8, 0x89, 0xf5, 0xa7, 0x01, 0xe5, 0x41, 0xbf, 0xfd, 0xf3, 0xe0, 0xdb, 0x7b, 0xa7, 0x48, 0xdf,
	0x15, 0xb9, 0xe4, 0x5d, 0x61, 0x3b, 0x51, 0xf4, 0x81, 0x86, 0x63, 0x35, 0x40, 0x0b, 0x19, 0x55,
	0x61, 0xfb, 0xb5, 0x3f, 0x1a, 0xce, 0x03, 0xa2, 0x4a, 0xd7, 0x62, 0x9a, 0x18, 0x33, 0xbb, 0x0d,
	0x1d, 0x00, 0x89, 0x48, 0x94, 0xf4, 0x0a, 0x2a, 0x71, 0x7c, 0xba, 0x28, 0xb1, 0xb3, 0xf1, 0x03,
	0x9c, 0x34, 0xb3, 0xfe, 0xca, 0x01, 0x9c, 0x0f, 0x87, 0xf6, 0xbd, 0x65, 0x7d, 0x0a, 0xf9, 0x0e,
	0x9d, 0x39, 0xae, 0xde, 0x0e, 0x25, 0xf1, 0xd2, 0x64, 0x0f, 0x7a, 0xb6, 0x2e, 0x4d, 0xcb, 0xa9,
	0xce, 0x6f, 0x65, 0x3a, 0x5f, 0x83, 0xc2, 0x75, 0x44, 0xc2, 0x2b, 0x67, 0x46, 0x54, 0x75, 0x0b,
	0x39, 0x41, 0x59, 0x3e, 0x4b, 0x59, 0x6f, 0x72, 0xce, 0x58, 0x10, 0x55, 0xb7, 0xc5, 0x18, 0x68,
	0x31, 0x4d, 0x59, 0x61, 0xbd, 0x59, 0x2a, 0xae, 0x9e, 0x25, 0x3e, 0x2f, 0x9c, 0x17, 0x3d, 0x2f,
	0x4b, 0x8e, 0x12, 0xf3, 0xb2, 0x54, 0xe3, 0xb8, 0x89, 0xf5, 0x06, 0x76, 0x63, 0xef, 0x8d, 0x08,
	0xf2, 0x12, 0xca, 0x31, 0x95, 0x8e, 0xb2, 0xcb, 0xa3, 0xc4, 0xf4, 0x38, 0x61, 0xd4, 0xf8, 0xdb,
	0x5c, 0x2c, 0xf3, 0xa5, 0xe3, 0x3b, 0x53, 0x12, 0xa2, 0x1f, 0x60, 0xaf, 0x1d, 0x12, 0x87, 0x91,
	0xbe, 0x4f, 0xd4, 0x11, 0xca, 0xae, 0x76, 0x2d, 0xab, 0xb2, 0x36, 0x50, 0x03, 0xf6, 0x3a, 0xc4,
	0x23, 0x0f, 0xf9, 0x8a, 0x27, 0x45, 0x3e, 0x9c, 0x1b, 0xe8, 0x3b, 0xa8, 0x74, 0x09, 0xfb, 0x88,
	0x64, 0x27, 0xc2, 0xb1, 0xe9, 0x79, 0xda, 0x71, 0x19, 0xb6, 0xb6, 0x1b, 0x73, 0xe0, 0xec, 0x88,
	0x3c, 0xbb, 0xcb, 0xba, 0xc4, 0x8c, 0xa2, 0xcc, 0xf4, 0xd6, 0x32, 0x1a, 0x6b, 0x03, 0x9d, 0xc2,
	0xee, 0xb2, 0xa8, 0xbb, 0x1c, 0x13, 0x25, 0x7d, 0x03, 0x65, 0x55, 0xd2, 0x63, 0xf2, 0x7c, 0x0d,
	0x95, 0x05, 0x40, 0xde, 0x6b, 0x94, 0x9a, 0x80, 0x5a, 0x4a, 0xb6, 0x36, 0xd0, 0x0b, 0xa8, 0x2c,
	0xa0, 0xad, 0x74, 0x49, 0xc0, 0xaa, 0x03, 0x48, 0x58, 0x6b, 0x46, 0x3f, 0x12, 0xf6, 0x4d, 0xcf,
	0x13, 0xf6, 0x31, 0x76, 0xcb, 0xda, 0x54, 0x51, 0xfb, 0x0a, 0xf6, 0x31, 0x99, 0x84, 0x24, 0x7a,
	0x3b, 0xeb, 0x5c, 0x0d, 0xec, 0x90, 0xfe, 0x3e, 0x17, 0x23, 0xf9, 0x50, 0xeb, 0xeb, 0x50, 0x94,
	0x09, 0x86, 0x6d, 0x7b, 0x95, 0x71, 0x59, 0x5f, 0x99, 0x32, 0x4f, 0xe3, 0x8f, 0x3c, 0x3c, 0x6d,
	0xd3, 0xd9, 0x8c, 0xfa, 0xf2, 0x71, 0xd0, 0x23, 0x7b, 0x08, 0xc5, 0xe6, 0x78, 0xac, 0x1e, 0x8c,
	0xd8, 0x23, 0x92, 0xcc, 0x76, 0x08, 0xc5, 0x0e, 0xf1, 0x1e, 0xb2, 0xfa, 0x4a, 0xf4, 0xae, 0xe9,
	0x69, 0xc3, 0x58, 0xd9, 0x3b, 0x4b, 0x1f, 0x55, 0xf8, 0x11, 0x94, 0x07, 0x84, 0x69, 0x30, 0xa3,
	0x7b, 0x73, 0xff, 0xea, 0xbc, 0x23, 0x7d, 0xff, 0xa2, 0x79, 0x75, 0xb7, 0xd5, 0x29, 0x94, 0x17,
	0x13, 0xc0, 0x29, 0x49, 0x3d, 0x19, 0xb5, 0x94, 0x2c, 0xd1, 0x2e, 0x06, 0x60, 0x95, 0x47, 0x22,
	0xfc, 0x89, 0xa0, 0x7b, 0xed, 0xd8, 0x47, 0xf1, 0xee, 0xc4, 0x31, 0xa7, 0xda, 0x92, 0x80, 0x7d,
	0xdd, 0x79, 0x2c, 0xec, 0x55, 0x1e, 0xab, 0x61, 0xaf, 0x17, 0x7b, 0x01, 0x9b, 0x9b, 0xaf, 0x0b,
	0xfb, 0xcd, 0xf0, 0xb1, 0xb0, 0x57, 0x79, 0xac, 0x86, 0xbd, 0x5e, 0xec, 0x05, 0x6c, 0x6e, 0x7e,
	0x0f, 0xec, 0xc6, 0x3f, 0x06, 0x98, 0xd7, 0xcc, 0xf5, 0x22, 0x74, 0x06, 0x9f, 0x48, 0x97, 0x59,
	0xea, 0x29, 0x88, 0xcd, 0xec, 0xd3, 0xd4, 0xfd, 0xaf, 0x6a, 0x6f, 0x41, 0xb5, 0x4b, 0x58, 0xca,
	0xaf, 0x35, 0x17, 0x3f, 0x0d, 0xe4, 0xdd, 0xb9, 0xfc, 0xef, 0x73, 0x57, 0x8c, 0x33, 0xbe, 0x8c,
	0xfe, 0x7b, 0x12, 0xb2, 0xfe, 0x88, 0x51, 0xdf, 0x09, 0xe7, 0xd7, 0x6c, 0xf2, 0x7d, 0xd6, 0x3d,
	0xad, 0xb0, 0x36, 0x5a, 0xa7, 0xf0, 0x6c, 0x44, 0x67, 0x75, 0x97, 0x32, 0xfe, 0xc7, 0xab, 0xde,
	0x0f, 0x88, 0xdf, 0xa3, 0xc3, 0xf3, 0xdb, 0x9b, 0xfa, 0x34, 0x0c, 0x46, 0x27, 0x4e, 0xe0, 0xb6,
	0x4a, 0xdd, 0x30, 0x18, 0xa9, 0x84, 0xb6, 0x71, 0x93, 0x17, 0xff, 0xcc, 0x5e, 0xfe, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x86, 0x0b, 0x9e, 0xe9, 0xaa, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionManagerClient is the client API for SessionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionManagerClient interface {
	// Sends a greeting
	CreateOneSession(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*SessionConfig, error)
	DeleteOneSession(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*Empty, error)
	GetOneSession(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*SessionConfig, error)
	GetAllSession(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionList, error)
	// Socks5
	CreateOneSOCKS5(ctx context.Context, in *SOCKS5Config, opts ...grpc.CallOption) (*SOCKS5Config, error)
	DeleteOneSOCKS5(ctx context.Context, in *SOCKS5Config, opts ...grpc.CallOption) (*Empty, error)
	GetOneSOCKS5(ctx context.Context, in *SOCKS5Config, opts ...grpc.CallOption) (*SOCKS5Config, error)
	// HTTP
	CreateOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error)
	DeleteOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*Empty, error)
	GetOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error)
	GetAllHTTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HTTPList, error)
	//:TODO  获取所有的设备列表
	// mDNS刷新列表
	RefreshmDNSProxyList(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*Empty, error)
	// 获取通过mDNS自动映射的TCP端口列表（http），然后可以查看页面
	GetAllTCP(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*PortList, error)
}

type sessionManagerClient struct {
	cc *grpc.ClientConn
}

func NewSessionManagerClient(cc *grpc.ClientConn) SessionManagerClient {
	return &sessionManagerClient{cc}
}

func (c *sessionManagerClient) CreateOneSession(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*SessionConfig, error) {
	out := new(SessionConfig)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/CreateOneSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) DeleteOneSession(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/DeleteOneSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) GetOneSession(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*SessionConfig, error) {
	out := new(SessionConfig)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/GetOneSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) GetAllSession(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionList, error) {
	out := new(SessionList)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/GetAllSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) CreateOneSOCKS5(ctx context.Context, in *SOCKS5Config, opts ...grpc.CallOption) (*SOCKS5Config, error) {
	out := new(SOCKS5Config)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/CreateOneSOCKS5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) DeleteOneSOCKS5(ctx context.Context, in *SOCKS5Config, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/DeleteOneSOCKS5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) GetOneSOCKS5(ctx context.Context, in *SOCKS5Config, opts ...grpc.CallOption) (*SOCKS5Config, error) {
	out := new(SOCKS5Config)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/GetOneSOCKS5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) CreateOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error) {
	out := new(HTTPConfig)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/CreateOneHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) DeleteOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/DeleteOneHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) GetOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error) {
	out := new(HTTPConfig)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/GetOneHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) GetAllHTTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HTTPList, error) {
	out := new(HTTPList)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/GetAllHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) RefreshmDNSProxyList(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/RefreshmDNSProxyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) GetAllTCP(ctx context.Context, in *SessionConfig, opts ...grpc.CallOption) (*PortList, error) {
	out := new(PortList)
	err := c.cc.Invoke(ctx, "/pb.SessionManager/GetAllTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionManagerServer is the server API for SessionManager service.
type SessionManagerServer interface {
	// Sends a greeting
	CreateOneSession(context.Context, *SessionConfig) (*SessionConfig, error)
	DeleteOneSession(context.Context, *SessionConfig) (*Empty, error)
	GetOneSession(context.Context, *SessionConfig) (*SessionConfig, error)
	GetAllSession(context.Context, *Empty) (*SessionList, error)
	// Socks5
	CreateOneSOCKS5(context.Context, *SOCKS5Config) (*SOCKS5Config, error)
	DeleteOneSOCKS5(context.Context, *SOCKS5Config) (*Empty, error)
	GetOneSOCKS5(context.Context, *SOCKS5Config) (*SOCKS5Config, error)
	// HTTP
	CreateOneHTTP(context.Context, *HTTPConfig) (*HTTPConfig, error)
	DeleteOneHTTP(context.Context, *HTTPConfig) (*Empty, error)
	GetOneHTTP(context.Context, *HTTPConfig) (*HTTPConfig, error)
	GetAllHTTP(context.Context, *Empty) (*HTTPList, error)
	//:TODO  获取所有的设备列表
	// mDNS刷新列表
	RefreshmDNSProxyList(context.Context, *SessionConfig) (*Empty, error)
	// 获取通过mDNS自动映射的TCP端口列表（http），然后可以查看页面
	GetAllTCP(context.Context, *SessionConfig) (*PortList, error)
}

// UnimplementedSessionManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSessionManagerServer struct {
}

func (*UnimplementedSessionManagerServer) CreateOneSession(ctx context.Context, req *SessionConfig) (*SessionConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneSession not implemented")
}
func (*UnimplementedSessionManagerServer) DeleteOneSession(ctx context.Context, req *SessionConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneSession not implemented")
}
func (*UnimplementedSessionManagerServer) GetOneSession(ctx context.Context, req *SessionConfig) (*SessionConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSession not implemented")
}
func (*UnimplementedSessionManagerServer) GetAllSession(ctx context.Context, req *Empty) (*SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSession not implemented")
}
func (*UnimplementedSessionManagerServer) CreateOneSOCKS5(ctx context.Context, req *SOCKS5Config) (*SOCKS5Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneSOCKS5 not implemented")
}
func (*UnimplementedSessionManagerServer) DeleteOneSOCKS5(ctx context.Context, req *SOCKS5Config) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneSOCKS5 not implemented")
}
func (*UnimplementedSessionManagerServer) GetOneSOCKS5(ctx context.Context, req *SOCKS5Config) (*SOCKS5Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSOCKS5 not implemented")
}
func (*UnimplementedSessionManagerServer) CreateOneHTTP(ctx context.Context, req *HTTPConfig) (*HTTPConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneHTTP not implemented")
}
func (*UnimplementedSessionManagerServer) DeleteOneHTTP(ctx context.Context, req *HTTPConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneHTTP not implemented")
}
func (*UnimplementedSessionManagerServer) GetOneHTTP(ctx context.Context, req *HTTPConfig) (*HTTPConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneHTTP not implemented")
}
func (*UnimplementedSessionManagerServer) GetAllHTTP(ctx context.Context, req *Empty) (*HTTPList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHTTP not implemented")
}
func (*UnimplementedSessionManagerServer) RefreshmDNSProxyList(ctx context.Context, req *SessionConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshmDNSProxyList not implemented")
}
func (*UnimplementedSessionManagerServer) GetAllTCP(ctx context.Context, req *SessionConfig) (*PortList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTCP not implemented")
}

func RegisterSessionManagerServer(s *grpc.Server, srv SessionManagerServer) {
	s.RegisterService(&_SessionManager_serviceDesc, srv)
}

func _SessionManager_CreateOneSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CreateOneSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/CreateOneSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CreateOneSession(ctx, req.(*SessionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_DeleteOneSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).DeleteOneSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/DeleteOneSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).DeleteOneSession(ctx, req.(*SessionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_GetOneSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).GetOneSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/GetOneSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).GetOneSession(ctx, req.(*SessionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_GetAllSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).GetAllSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/GetAllSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).GetAllSession(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_CreateOneSOCKS5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SOCKS5Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CreateOneSOCKS5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/CreateOneSOCKS5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CreateOneSOCKS5(ctx, req.(*SOCKS5Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_DeleteOneSOCKS5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SOCKS5Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).DeleteOneSOCKS5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/DeleteOneSOCKS5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).DeleteOneSOCKS5(ctx, req.(*SOCKS5Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_GetOneSOCKS5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SOCKS5Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).GetOneSOCKS5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/GetOneSOCKS5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).GetOneSOCKS5(ctx, req.(*SOCKS5Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_CreateOneHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CreateOneHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/CreateOneHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CreateOneHTTP(ctx, req.(*HTTPConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_DeleteOneHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).DeleteOneHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/DeleteOneHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).DeleteOneHTTP(ctx, req.(*HTTPConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_GetOneHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).GetOneHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/GetOneHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).GetOneHTTP(ctx, req.(*HTTPConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_GetAllHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).GetAllHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/GetAllHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).GetAllHTTP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_RefreshmDNSProxyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).RefreshmDNSProxyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/RefreshmDNSProxyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).RefreshmDNSProxyList(ctx, req.(*SessionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_GetAllTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).GetAllTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManager/GetAllTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).GetAllTCP(ctx, req.(*SessionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SessionManager",
	HandlerType: (*SessionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneSession",
			Handler:    _SessionManager_CreateOneSession_Handler,
		},
		{
			MethodName: "DeleteOneSession",
			Handler:    _SessionManager_DeleteOneSession_Handler,
		},
		{
			MethodName: "GetOneSession",
			Handler:    _SessionManager_GetOneSession_Handler,
		},
		{
			MethodName: "GetAllSession",
			Handler:    _SessionManager_GetAllSession_Handler,
		},
		{
			MethodName: "CreateOneSOCKS5",
			Handler:    _SessionManager_CreateOneSOCKS5_Handler,
		},
		{
			MethodName: "DeleteOneSOCKS5",
			Handler:    _SessionManager_DeleteOneSOCKS5_Handler,
		},
		{
			MethodName: "GetOneSOCKS5",
			Handler:    _SessionManager_GetOneSOCKS5_Handler,
		},
		{
			MethodName: "CreateOneHTTP",
			Handler:    _SessionManager_CreateOneHTTP_Handler,
		},
		{
			MethodName: "DeleteOneHTTP",
			Handler:    _SessionManager_DeleteOneHTTP_Handler,
		},
		{
			MethodName: "GetOneHTTP",
			Handler:    _SessionManager_GetOneHTTP_Handler,
		},
		{
			MethodName: "GetAllHTTP",
			Handler:    _SessionManager_GetAllHTTP_Handler,
		},
		{
			MethodName: "RefreshmDNSProxyList",
			Handler:    _SessionManager_RefreshmDNSProxyList_Handler,
		},
		{
			MethodName: "GetAllTCP",
			Handler:    _SessionManager_GetAllTCP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CommonDeviceManagerClient is the client API for CommonDeviceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonDeviceManagerClient interface {
	//设备的操作:增删
	AddDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error)
	DelDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error)
	GetAllDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error)
	//网络唤醒
	SetDeviceMac(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error)
	WakeOnLAN(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error)
	// TCP
	CreateOneTCP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error)
	DeleteOneTCP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*Empty, error)
	GetOneTCP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error)
	GetAllTCP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PortList, error)
	// UDP
	CreateOneUDP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error)
	DeleteOneUDP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*Empty, error)
	GetOneUDP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error)
	GetAllUDP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PortList, error)
	// FTP
	CreateOneFTP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error)
	DeleteOneFTP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*Empty, error)
	GetOneFTP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error)
	GetAllFTP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PortList, error)
}

type commonDeviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewCommonDeviceManagerClient(cc *grpc.ClientConn) CommonDeviceManagerClient {
	return &commonDeviceManagerClient{cc}
}

func (c *commonDeviceManagerClient) AddDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/AddDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) DelDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/DelDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetAllDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error) {
	out := new(DeviceList)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetAllDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) SetDeviceMac(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/SetDeviceMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) WakeOnLAN(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/WakeOnLAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) CreateOneTCP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error) {
	out := new(PortConfig)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/CreateOneTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) DeleteOneTCP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/DeleteOneTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetOneTCP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error) {
	out := new(PortConfig)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetOneTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetAllTCP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PortList, error) {
	out := new(PortList)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetAllTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) CreateOneUDP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error) {
	out := new(PortConfig)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/CreateOneUDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) DeleteOneUDP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/DeleteOneUDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetOneUDP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error) {
	out := new(PortConfig)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetOneUDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetAllUDP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PortList, error) {
	out := new(PortList)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetAllUDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) CreateOneFTP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error) {
	out := new(PortConfig)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/CreateOneFTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) DeleteOneFTP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/DeleteOneFTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetOneFTP(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfig, error) {
	out := new(PortConfig)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetOneFTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonDeviceManagerClient) GetAllFTP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PortList, error) {
	out := new(PortList)
	err := c.cc.Invoke(ctx, "/pb.CommonDeviceManager/GetAllFTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonDeviceManagerServer is the server API for CommonDeviceManager service.
type CommonDeviceManagerServer interface {
	//设备的操作:增删
	AddDevice(context.Context, *Device) (*Empty, error)
	DelDevice(context.Context, *Device) (*Empty, error)
	GetAllDevice(context.Context, *Empty) (*DeviceList, error)
	//网络唤醒
	SetDeviceMac(context.Context, *Device) (*Empty, error)
	WakeOnLAN(context.Context, *Device) (*Empty, error)
	// TCP
	CreateOneTCP(context.Context, *PortConfig) (*PortConfig, error)
	DeleteOneTCP(context.Context, *PortConfig) (*Empty, error)
	GetOneTCP(context.Context, *PortConfig) (*PortConfig, error)
	GetAllTCP(context.Context, *Device) (*PortList, error)
	// UDP
	CreateOneUDP(context.Context, *PortConfig) (*PortConfig, error)
	DeleteOneUDP(context.Context, *PortConfig) (*Empty, error)
	GetOneUDP(context.Context, *PortConfig) (*PortConfig, error)
	GetAllUDP(context.Context, *Device) (*PortList, error)
	// FTP
	CreateOneFTP(context.Context, *PortConfig) (*PortConfig, error)
	DeleteOneFTP(context.Context, *PortConfig) (*Empty, error)
	GetOneFTP(context.Context, *PortConfig) (*PortConfig, error)
	GetAllFTP(context.Context, *Device) (*PortList, error)
}

// UnimplementedCommonDeviceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedCommonDeviceManagerServer struct {
}

func (*UnimplementedCommonDeviceManagerServer) AddDevice(ctx context.Context, req *Device) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) DelDevice(ctx context.Context, req *Device) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDevice not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetAllDevice(ctx context.Context, req *Empty) (*DeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDevice not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) SetDeviceMac(ctx context.Context, req *Device) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceMac not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) WakeOnLAN(ctx context.Context, req *Device) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WakeOnLAN not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) CreateOneTCP(ctx context.Context, req *PortConfig) (*PortConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneTCP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) DeleteOneTCP(ctx context.Context, req *PortConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneTCP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetOneTCP(ctx context.Context, req *PortConfig) (*PortConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneTCP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetAllTCP(ctx context.Context, req *Device) (*PortList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTCP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) CreateOneUDP(ctx context.Context, req *PortConfig) (*PortConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneUDP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) DeleteOneUDP(ctx context.Context, req *PortConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneUDP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetOneUDP(ctx context.Context, req *PortConfig) (*PortConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUDP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetAllUDP(ctx context.Context, req *Device) (*PortList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUDP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) CreateOneFTP(ctx context.Context, req *PortConfig) (*PortConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneFTP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) DeleteOneFTP(ctx context.Context, req *PortConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneFTP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetOneFTP(ctx context.Context, req *PortConfig) (*PortConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneFTP not implemented")
}
func (*UnimplementedCommonDeviceManagerServer) GetAllFTP(ctx context.Context, req *Device) (*PortList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFTP not implemented")
}

func RegisterCommonDeviceManagerServer(s *grpc.Server, srv CommonDeviceManagerServer) {
	s.RegisterService(&_CommonDeviceManager_serviceDesc, srv)
}

func _CommonDeviceManager_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).AddDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_DelDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).DelDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/DelDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).DelDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetAllDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetAllDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetAllDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetAllDevice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_SetDeviceMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).SetDeviceMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/SetDeviceMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).SetDeviceMac(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_WakeOnLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).WakeOnLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/WakeOnLAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).WakeOnLAN(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_CreateOneTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).CreateOneTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/CreateOneTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).CreateOneTCP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_DeleteOneTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).DeleteOneTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/DeleteOneTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).DeleteOneTCP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetOneTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetOneTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetOneTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetOneTCP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetAllTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetAllTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetAllTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetAllTCP(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_CreateOneUDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).CreateOneUDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/CreateOneUDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).CreateOneUDP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_DeleteOneUDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).DeleteOneUDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/DeleteOneUDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).DeleteOneUDP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetOneUDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetOneUDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetOneUDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetOneUDP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetAllUDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetAllUDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetAllUDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetAllUDP(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_CreateOneFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).CreateOneFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/CreateOneFTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).CreateOneFTP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_DeleteOneFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).DeleteOneFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/DeleteOneFTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).DeleteOneFTP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetOneFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetOneFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetOneFTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetOneFTP(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonDeviceManager_GetAllFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDeviceManagerServer).GetAllFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonDeviceManager/GetAllFTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDeviceManagerServer).GetAllFTP(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommonDeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommonDeviceManager",
	HandlerType: (*CommonDeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _CommonDeviceManager_AddDevice_Handler,
		},
		{
			MethodName: "DelDevice",
			Handler:    _CommonDeviceManager_DelDevice_Handler,
		},
		{
			MethodName: "GetAllDevice",
			Handler:    _CommonDeviceManager_GetAllDevice_Handler,
		},
		{
			MethodName: "SetDeviceMac",
			Handler:    _CommonDeviceManager_SetDeviceMac_Handler,
		},
		{
			MethodName: "WakeOnLAN",
			Handler:    _CommonDeviceManager_WakeOnLAN_Handler,
		},
		{
			MethodName: "CreateOneTCP",
			Handler:    _CommonDeviceManager_CreateOneTCP_Handler,
		},
		{
			MethodName: "DeleteOneTCP",
			Handler:    _CommonDeviceManager_DeleteOneTCP_Handler,
		},
		{
			MethodName: "GetOneTCP",
			Handler:    _CommonDeviceManager_GetOneTCP_Handler,
		},
		{
			MethodName: "GetAllTCP",
			Handler:    _CommonDeviceManager_GetAllTCP_Handler,
		},
		{
			MethodName: "CreateOneUDP",
			Handler:    _CommonDeviceManager_CreateOneUDP_Handler,
		},
		{
			MethodName: "DeleteOneUDP",
			Handler:    _CommonDeviceManager_DeleteOneUDP_Handler,
		},
		{
			MethodName: "GetOneUDP",
			Handler:    _CommonDeviceManager_GetOneUDP_Handler,
		},
		{
			MethodName: "GetAllUDP",
			Handler:    _CommonDeviceManager_GetAllUDP_Handler,
		},
		{
			MethodName: "CreateOneFTP",
			Handler:    _CommonDeviceManager_CreateOneFTP_Handler,
		},
		{
			MethodName: "DeleteOneFTP",
			Handler:    _CommonDeviceManager_DeleteOneFTP_Handler,
		},
		{
			MethodName: "GetOneFTP",
			Handler:    _CommonDeviceManager_GetOneFTP_Handler,
		},
		{
			MethodName: "GetAllFTP",
			Handler:    _CommonDeviceManager_GetAllFTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UtilsClient is the client API for Utils service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilsClient interface {
	GetAllmDNSServiceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MDNSServiceList, error)
	GetmDNSServiceListByType(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*MDNSServiceList, error)
	ConvertOctonaryUtf8(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*StringValue, error)
}

type utilsClient struct {
	cc *grpc.ClientConn
}

func NewUtilsClient(cc *grpc.ClientConn) UtilsClient {
	return &utilsClient{cc}
}

func (c *utilsClient) GetAllmDNSServiceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MDNSServiceList, error) {
	out := new(MDNSServiceList)
	err := c.cc.Invoke(ctx, "/pb.Utils/GetAllmDNSServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) GetmDNSServiceListByType(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*MDNSServiceList, error) {
	out := new(MDNSServiceList)
	err := c.cc.Invoke(ctx, "/pb.Utils/GetmDNSServiceListByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsClient) ConvertOctonaryUtf8(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := c.cc.Invoke(ctx, "/pb.Utils/ConvertOctonaryUtf8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServer is the server API for Utils service.
type UtilsServer interface {
	GetAllmDNSServiceList(context.Context, *Empty) (*MDNSServiceList, error)
	GetmDNSServiceListByType(context.Context, *StringValue) (*MDNSServiceList, error)
	ConvertOctonaryUtf8(context.Context, *StringValue) (*StringValue, error)
}

// UnimplementedUtilsServer can be embedded to have forward compatible implementations.
type UnimplementedUtilsServer struct {
}

func (*UnimplementedUtilsServer) GetAllmDNSServiceList(ctx context.Context, req *Empty) (*MDNSServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllmDNSServiceList not implemented")
}
func (*UnimplementedUtilsServer) GetmDNSServiceListByType(ctx context.Context, req *StringValue) (*MDNSServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetmDNSServiceListByType not implemented")
}
func (*UnimplementedUtilsServer) ConvertOctonaryUtf8(ctx context.Context, req *StringValue) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertOctonaryUtf8 not implemented")
}

func RegisterUtilsServer(s *grpc.Server, srv UtilsServer) {
	s.RegisterService(&_Utils_serviceDesc, srv)
}

func _Utils_GetAllmDNSServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).GetAllmDNSServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Utils/GetAllmDNSServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).GetAllmDNSServiceList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_GetmDNSServiceListByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).GetmDNSServiceListByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Utils/GetmDNSServiceListByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).GetmDNSServiceListByType(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utils_ConvertOctonaryUtf8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServer).ConvertOctonaryUtf8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Utils/ConvertOctonaryUtf8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServer).ConvertOctonaryUtf8(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Utils_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Utils",
	HandlerType: (*UtilsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllmDNSServiceList",
			Handler:    _Utils_GetAllmDNSServiceList_Handler,
		},
		{
			MethodName: "GetmDNSServiceListByType",
			Handler:    _Utils_GetmDNSServiceListByType_Handler,
		},
		{
			MethodName: "ConvertOctonaryUtf8",
			Handler:    _Utils_ConvertOctonaryUtf8_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
