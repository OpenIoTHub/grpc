// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: service.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//小米网关设备
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type MDNSService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance string `protobuf:"bytes,1,opt,name=Instance,proto3" json:"Instance,omitempty"`
	IP       string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	MDNSInfo string `protobuf:"bytes,4,opt,name=MDNSInfo,proto3" json:"MDNSInfo,omitempty"`
}

func (x *MDNSService) Reset() {
	*x = MDNSService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MDNSService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MDNSService) ProtoMessage() {}

func (x *MDNSService) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MDNSService.ProtoReflect.Descriptor instead.
func (*MDNSService) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *MDNSService) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *MDNSService) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *MDNSService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MDNSService) GetMDNSInfo() string {
	if x != nil {
		return x.MDNSInfo
	}
	return ""
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R int32 `protobuf:"varint,1,opt,name=R,proto3" json:"R,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=G,proto3" json:"G,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=B,proto3" json:"B,omitempty"`
	A int32 `protobuf:"varint,4,opt,name=A,proto3" json:"A,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *Color) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Color) GetG() int32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Color) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *Color) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type GatewayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On         bool   `protobuf:"varint,1,opt,name=On,proto3" json:"On,omitempty"`
	Color      *Color `protobuf:"bytes,2,opt,name=Color,proto3" json:"Color,omitempty"`
	Brightness uint32 `protobuf:"varint,3,opt,name=Brightness,proto3" json:"Brightness,omitempty"`
}

func (x *GatewayState) Reset() {
	*x = GatewayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayState) ProtoMessage() {}

func (x *GatewayState) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayState.ProtoReflect.Descriptor instead.
func (*GatewayState) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayState) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *GatewayState) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *GatewayState) GetBrightness() uint32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

type GatewayUpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State *GatewayState `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *GatewayUpdateMessage) Reset() {
	*x = GatewayUpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayUpdateMessage) ProtoMessage() {}

func (x *GatewayUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayUpdateMessage.ProtoReflect.Descriptor instead.
func (*GatewayUpdateMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *GatewayUpdateMessage) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GatewayUpdateMessage) GetState() *GatewayState {
	if x != nil {
		return x.State
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId       string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Mac         string `protobuf:"bytes,3,opt,name=Mac,proto3" json:"Mac,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *Device) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *Device) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Device) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Device) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*Device `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
}

func (x *DeviceList) Reset() {
	*x = DeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceList) ProtoMessage() {}

func (x *DeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceList.ProtoReflect.Descriptor instead.
func (*DeviceList) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceList) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// 几种代理类型
type SessionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId             string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Token             string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	StatusToClient    bool   `protobuf:"varint,4,opt,name=StatusToClient,proto3" json:"StatusToClient,omitempty"`
	StatusP2PAsClient bool   `protobuf:"varint,5,opt,name=StatusP2PAsClient,proto3" json:"StatusP2PAsClient,omitempty"`
	StatusP2PAsServer bool   `protobuf:"varint,6,opt,name=StatusP2PAsServer,proto3" json:"StatusP2PAsServer,omitempty"`
}

func (x *SessionConfig) Reset() {
	*x = SessionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfig) ProtoMessage() {}

func (x *SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfig.ProtoReflect.Descriptor instead.
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *SessionConfig) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SessionConfig) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SessionConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SessionConfig) GetStatusToClient() bool {
	if x != nil {
		return x.StatusToClient
	}
	return false
}

func (x *SessionConfig) GetStatusP2PAsClient() bool {
	if x != nil {
		return x.StatusP2PAsClient
	}
	return false
}

func (x *SessionConfig) GetStatusP2PAsServer() bool {
	if x != nil {
		return x.StatusP2PAsServer
	}
	return false
}

type SessionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionConfigs []*SessionConfig `protobuf:"bytes,1,rep,name=SessionConfigs,proto3" json:"SessionConfigs,omitempty"`
}

func (x *SessionList) Reset() {
	*x = SessionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionList) ProtoMessage() {}

func (x *SessionList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionList.ProtoReflect.Descriptor instead.
func (*SessionList) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *SessionList) GetSessionConfigs() []*SessionConfig {
	if x != nil {
		return x.SessionConfigs
	}
	return nil
}

type PortConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device           *Device `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	LocalProt        int32   `protobuf:"varint,2,opt,name=LocalProt,proto3" json:"LocalProt,omitempty"`
	RemotePort       int32   `protobuf:"varint,3,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	Description      string  `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	RemotePortStatus bool    `protobuf:"varint,5,opt,name=RemotePortStatus,proto3" json:"RemotePortStatus,omitempty"`
	MDNSInfo         string  `protobuf:"bytes,6,opt,name=MDNSInfo,proto3" json:"MDNSInfo,omitempty"`
}

func (x *PortConfig) Reset() {
	*x = PortConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfig) ProtoMessage() {}

func (x *PortConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfig.ProtoReflect.Descriptor instead.
func (*PortConfig) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *PortConfig) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PortConfig) GetLocalProt() int32 {
	if x != nil {
		return x.LocalProt
	}
	return 0
}

func (x *PortConfig) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *PortConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PortConfig) GetRemotePortStatus() bool {
	if x != nil {
		return x.RemotePortStatus
	}
	return false
}

func (x *PortConfig) GetMDNSInfo() string {
	if x != nil {
		return x.MDNSInfo
	}
	return ""
}

type PortList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortConfigs []*PortConfig `protobuf:"bytes,1,rep,name=PortConfigs,proto3" json:"PortConfigs,omitempty"`
}

func (x *PortList) Reset() {
	*x = PortList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortList) ProtoMessage() {}

func (x *PortList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortList.ProtoReflect.Descriptor instead.
func (*PortList) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *PortList) GetPortConfigs() []*PortConfig {
	if x != nil {
		return x.PortConfigs
	}
	return nil
}

type SOCKS5Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId       string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Port        int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	EncType     string `protobuf:"bytes,4,opt,name=EncType,proto3" json:"EncType,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *SOCKS5Config) Reset() {
	*x = SOCKS5Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SOCKS5Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOCKS5Config) ProtoMessage() {}

func (x *SOCKS5Config) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOCKS5Config.ProtoReflect.Descriptor instead.
func (*SOCKS5Config) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *SOCKS5Config) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SOCKS5Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SOCKS5Config) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SOCKS5Config) GetEncType() string {
	if x != nil {
		return x.EncType
	}
	return ""
}

func (x *SOCKS5Config) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SOCKS5List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SOCKS5Configs []*SOCKS5Config `protobuf:"bytes,1,rep,name=SOCKS5Configs,proto3" json:"SOCKS5Configs,omitempty"`
}

func (x *SOCKS5List) Reset() {
	*x = SOCKS5List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SOCKS5List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOCKS5List) ProtoMessage() {}

func (x *SOCKS5List) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOCKS5List.ProtoReflect.Descriptor instead.
func (*SOCKS5List) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *SOCKS5List) GetSOCKS5Configs() []*SOCKS5Config {
	if x != nil {
		return x.SOCKS5Configs
	}
	return nil
}

type MDNSServiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MDNSServices []*MDNSService `protobuf:"bytes,1,rep,name=MDNSServices,proto3" json:"MDNSServices,omitempty"`
}

func (x *MDNSServiceList) Reset() {
	*x = MDNSServiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MDNSServiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MDNSServiceList) ProtoMessage() {}

func (x *MDNSServiceList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MDNSServiceList.ProtoReflect.Descriptor instead.
func (*MDNSServiceList) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *MDNSServiceList) GetMDNSServices() []*MDNSService {
	if x != nil {
		return x.MDNSServices
	}
	return nil
}

type TokenModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId      string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Host       string   `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	TcpPort    int32    `protobuf:"varint,3,opt,name=TcpPort,proto3" json:"TcpPort,omitempty"`
	KcpPort    int32    `protobuf:"varint,4,opt,name=KcpPort,proto3" json:"KcpPort,omitempty"`
	TlsPort    int32    `protobuf:"varint,5,opt,name=TlsPort,proto3" json:"TlsPort,omitempty"`
	GrpcPort   int32    `protobuf:"varint,6,opt,name=GrpcPort,proto3" json:"GrpcPort,omitempty"`
	UDPApiPort int32    `protobuf:"varint,7,opt,name=UDPApiPort,proto3" json:"UDPApiPort,omitempty"`
	KCPApiPort int32    `protobuf:"varint,8,opt,name=KCPApiPort,proto3" json:"KCPApiPort,omitempty"`
	Permission []string `protobuf:"bytes,9,rep,name=Permission,proto3" json:"Permission,omitempty"`
}

func (x *TokenModel) Reset() {
	*x = TokenModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenModel) ProtoMessage() {}

func (x *TokenModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenModel.ProtoReflect.Descriptor instead.
func (*TokenModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *TokenModel) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TokenModel) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TokenModel) GetTcpPort() int32 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *TokenModel) GetKcpPort() int32 {
	if x != nil {
		return x.KcpPort
	}
	return 0
}

func (x *TokenModel) GetTlsPort() int32 {
	if x != nil {
		return x.TlsPort
	}
	return 0
}

func (x *TokenModel) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *TokenModel) GetUDPApiPort() int32 {
	if x != nil {
		return x.UDPApiPort
	}
	return 0
}

func (x *TokenModel) GetKCPApiPort() int32 {
	if x != nil {
		return x.KCPApiPort
	}
	return 0
}

func (x *TokenModel) GetPermission() []string {
	if x != nil {
		return x.Permission
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x69, 0x0a, 0x0b, 0x4d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x52, 0x12, 0x0c, 0x0a, 0x01, 0x47, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x47, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x42, 0x12,
	0x0c, 0x0a, 0x01, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x41, 0x22, 0x5f, 0x0a,
	0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6e, 0x12, 0x1f, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x4e,
	0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x66,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x32, 0x50, 0x41,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x32, 0x50, 0x41, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x32, 0x50, 0x41, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x32, 0x50, 0x41, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x48,
	0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x44, 0x4e, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x44, 0x4e, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x53, 0x4f, 0x43,
	0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x46, 0x0a, 0x0f, 0x4d, 0x44,
	0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x0c, 0x4d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x4d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x63,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4b, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x6c, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x54, 0x6c, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x70,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x72, 0x70,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x44, 0x50, 0x41, 0x70, 0x69, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x44, 0x50, 0x41, 0x70,
	0x69, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x43, 0x50, 0x41, 0x70, 0x69, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4b, 0x43, 0x50, 0x41, 0x70,
	0x69, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xf1, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x4f, 0x43,
	0x4b, 0x53, 0x35, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x4f, 0x43, 0x4b, 0x53,
	0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x12, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x12, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6d, 0x44, 0x4e, 0x53,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x43, 0x50, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x32, 0x82, 0x06, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x09, 0x57, 0x61, 0x6b, 0x65, 0x4f, 0x6e, 0x4c, 0x41, 0x4e,
	0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x54, 0x43, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x54, 0x43, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x54, 0x43, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x43, 0x50, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x55, 0x44, 0x50,
	0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x55,
	0x44, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x55, 0x44, 0x50, 0x12, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x27,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x44, 0x50, 0x12, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x46, 0x54, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x46, 0x54, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x46, 0x54, 0x50, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46,
	0x54, 0x50, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x32, 0xd2,
	0x02, 0x0a, 0x05, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x6d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x6d, 0x44, 0x4e, 0x53, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x4f, 0x63, 0x74, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x74, 0x66, 0x38, 0x12, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x0d, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_proto_goTypes = []interface{}{
	(*StringValue)(nil),          // 0: pb.StringValue
	(*Empty)(nil),                // 1: pb.Empty
	(*MDNSService)(nil),          // 2: pb.MDNSService
	(*Color)(nil),                // 3: pb.Color
	(*GatewayState)(nil),         // 4: pb.GatewayState
	(*GatewayUpdateMessage)(nil), // 5: pb.GatewayUpdateMessage
	(*Device)(nil),               // 6: pb.Device
	(*DeviceList)(nil),           // 7: pb.DeviceList
	(*SessionConfig)(nil),        // 8: pb.SessionConfig
	(*SessionList)(nil),          // 9: pb.SessionList
	(*PortConfig)(nil),           // 10: pb.PortConfig
	(*PortList)(nil),             // 11: pb.PortList
	(*SOCKS5Config)(nil),         // 12: pb.SOCKS5Config
	(*SOCKS5List)(nil),           // 13: pb.SOCKS5List
	(*MDNSServiceList)(nil),      // 14: pb.MDNSServiceList
	(*TokenModel)(nil),           // 15: pb.TokenModel
}
var file_service_proto_depIdxs = []int32{
	3,  // 0: pb.GatewayState.Color:type_name -> pb.Color
	4,  // 1: pb.GatewayUpdateMessage.State:type_name -> pb.GatewayState
	6,  // 2: pb.DeviceList.Devices:type_name -> pb.Device
	8,  // 3: pb.SessionList.SessionConfigs:type_name -> pb.SessionConfig
	6,  // 4: pb.PortConfig.Device:type_name -> pb.Device
	10, // 5: pb.PortList.PortConfigs:type_name -> pb.PortConfig
	12, // 6: pb.SOCKS5List.SOCKS5Configs:type_name -> pb.SOCKS5Config
	2,  // 7: pb.MDNSServiceList.MDNSServices:type_name -> pb.MDNSService
	8,  // 8: pb.SessionManager.CreateOneSession:input_type -> pb.SessionConfig
	8,  // 9: pb.SessionManager.DeleteOneSession:input_type -> pb.SessionConfig
	8,  // 10: pb.SessionManager.GetOneSession:input_type -> pb.SessionConfig
	1,  // 11: pb.SessionManager.GetAllSession:input_type -> pb.Empty
	12, // 12: pb.SessionManager.CreateOneSOCKS5:input_type -> pb.SOCKS5Config
	12, // 13: pb.SessionManager.DeleteOneSOCKS5:input_type -> pb.SOCKS5Config
	12, // 14: pb.SessionManager.GetOneSOCKS5:input_type -> pb.SOCKS5Config
	8,  // 15: pb.SessionManager.RefreshmDNSProxyList:input_type -> pb.SessionConfig
	8,  // 16: pb.SessionManager.GetAllTCP:input_type -> pb.SessionConfig
	6,  // 17: pb.CommonDeviceManager.AddDevice:input_type -> pb.Device
	6,  // 18: pb.CommonDeviceManager.DelDevice:input_type -> pb.Device
	1,  // 19: pb.CommonDeviceManager.GetAllDevice:input_type -> pb.Empty
	6,  // 20: pb.CommonDeviceManager.SetDeviceMac:input_type -> pb.Device
	6,  // 21: pb.CommonDeviceManager.WakeOnLAN:input_type -> pb.Device
	10, // 22: pb.CommonDeviceManager.CreateOneTCP:input_type -> pb.PortConfig
	10, // 23: pb.CommonDeviceManager.DeleteOneTCP:input_type -> pb.PortConfig
	10, // 24: pb.CommonDeviceManager.GetOneTCP:input_type -> pb.PortConfig
	6,  // 25: pb.CommonDeviceManager.GetAllTCP:input_type -> pb.Device
	10, // 26: pb.CommonDeviceManager.CreateOneUDP:input_type -> pb.PortConfig
	10, // 27: pb.CommonDeviceManager.DeleteOneUDP:input_type -> pb.PortConfig
	10, // 28: pb.CommonDeviceManager.GetOneUDP:input_type -> pb.PortConfig
	6,  // 29: pb.CommonDeviceManager.GetAllUDP:input_type -> pb.Device
	10, // 30: pb.CommonDeviceManager.CreateOneFTP:input_type -> pb.PortConfig
	10, // 31: pb.CommonDeviceManager.DeleteOneFTP:input_type -> pb.PortConfig
	10, // 32: pb.CommonDeviceManager.GetOneFTP:input_type -> pb.PortConfig
	6,  // 33: pb.CommonDeviceManager.GetAllFTP:input_type -> pb.Device
	1,  // 34: pb.Utils.GetAllmDNSServiceList:input_type -> pb.Empty
	0,  // 35: pb.Utils.GetmDNSServiceListByType:input_type -> pb.StringValue
	0,  // 36: pb.Utils.ConvertOctonaryUtf8:input_type -> pb.StringValue
	1,  // 37: pb.Utils.GetAllConfig:input_type -> pb.Empty
	0,  // 38: pb.Utils.LoadAllConfig:input_type -> pb.StringValue
	0,  // 39: pb.Utils.GetTokenModel:input_type -> pb.StringValue
	8,  // 40: pb.SessionManager.CreateOneSession:output_type -> pb.SessionConfig
	1,  // 41: pb.SessionManager.DeleteOneSession:output_type -> pb.Empty
	8,  // 42: pb.SessionManager.GetOneSession:output_type -> pb.SessionConfig
	9,  // 43: pb.SessionManager.GetAllSession:output_type -> pb.SessionList
	12, // 44: pb.SessionManager.CreateOneSOCKS5:output_type -> pb.SOCKS5Config
	1,  // 45: pb.SessionManager.DeleteOneSOCKS5:output_type -> pb.Empty
	12, // 46: pb.SessionManager.GetOneSOCKS5:output_type -> pb.SOCKS5Config
	1,  // 47: pb.SessionManager.RefreshmDNSProxyList:output_type -> pb.Empty
	11, // 48: pb.SessionManager.GetAllTCP:output_type -> pb.PortList
	1,  // 49: pb.CommonDeviceManager.AddDevice:output_type -> pb.Empty
	1,  // 50: pb.CommonDeviceManager.DelDevice:output_type -> pb.Empty
	7,  // 51: pb.CommonDeviceManager.GetAllDevice:output_type -> pb.DeviceList
	1,  // 52: pb.CommonDeviceManager.SetDeviceMac:output_type -> pb.Empty
	1,  // 53: pb.CommonDeviceManager.WakeOnLAN:output_type -> pb.Empty
	10, // 54: pb.CommonDeviceManager.CreateOneTCP:output_type -> pb.PortConfig
	1,  // 55: pb.CommonDeviceManager.DeleteOneTCP:output_type -> pb.Empty
	10, // 56: pb.CommonDeviceManager.GetOneTCP:output_type -> pb.PortConfig
	11, // 57: pb.CommonDeviceManager.GetAllTCP:output_type -> pb.PortList
	10, // 58: pb.CommonDeviceManager.CreateOneUDP:output_type -> pb.PortConfig
	1,  // 59: pb.CommonDeviceManager.DeleteOneUDP:output_type -> pb.Empty
	10, // 60: pb.CommonDeviceManager.GetOneUDP:output_type -> pb.PortConfig
	11, // 61: pb.CommonDeviceManager.GetAllUDP:output_type -> pb.PortList
	10, // 62: pb.CommonDeviceManager.CreateOneFTP:output_type -> pb.PortConfig
	1,  // 63: pb.CommonDeviceManager.DeleteOneFTP:output_type -> pb.Empty
	10, // 64: pb.CommonDeviceManager.GetOneFTP:output_type -> pb.PortConfig
	11, // 65: pb.CommonDeviceManager.GetAllFTP:output_type -> pb.PortList
	14, // 66: pb.Utils.GetAllmDNSServiceList:output_type -> pb.MDNSServiceList
	14, // 67: pb.Utils.GetmDNSServiceListByType:output_type -> pb.MDNSServiceList
	0,  // 68: pb.Utils.ConvertOctonaryUtf8:output_type -> pb.StringValue
	0,  // 69: pb.Utils.GetAllConfig:output_type -> pb.StringValue
	1,  // 70: pb.Utils.LoadAllConfig:output_type -> pb.Empty
	15, // 71: pb.Utils.GetTokenModel:output_type -> pb.TokenModel
	40, // [40:72] is the sub-list for method output_type
	8,  // [8:40] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MDNSService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayUpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SOCKS5Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SOCKS5List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MDNSServiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
